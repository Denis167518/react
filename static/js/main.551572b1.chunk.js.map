{"version":3,"sources":["constants/text.js","components/Header/Header.js","constants/utils.js","components/Sidebar/connect.js","redux/sidebar/actions.js","redux/sidebar/types.js","components/Sidebar/Sidebar.js","components/Avatar/Avatar.js","utils/func.js","components/Player/Player.js","components/Card/Card.js","pages/Analytics/Analytics.js","pages/Musicians/Musicians.js","redux/notes/actions.js","redux/notes/types.js","pages/Notes/helpers.js","pages/Notes/connect.js","pages/Notes/components/Note/Note.js","pages/Notes/components/EditContainer/EditContainer.js","pages/Notes/Notes.js","axios.js","methods/api.js","pages/Music/connect.js","pages/Music/helpers.js","redux/music/actions.js","redux/music/types.js","pages/Music/Music.js","redux/sidebar/reducer.js","redux/notes/reducer.js","redux/music/reducer.js","redux/index.js","App.js","serviceWorker.js","index.js"],"names":["text","appName","musicHeadline","modalApply","modalCancel","modalAdd","modalSave","buttonDelete","buttonChange","buttonSearch","buttonPlaySong","placeholderForGenderSelect","placeholderForSearchMusic","genderMale","genderFemale","imgAlt","Header","className","type","theme","utils","sidebarItems","title","path","iconType","userTableColumns","types","date","musicians","name","age","gender","region","connect","state","isOpen","sidebarReducer","dispatch","toggleState","renderList","Utils","map","it","to","key","activeClassName","this","props","onClick","Component","Avatar","url","src","alt","createCorrectDurationPart","part","String","length","parseDuration","time","Date","getMinutes","getSeconds","parseDateRelease","toDateString","slice","parseName","createReducer","handleReducer","defaultState","action","handler","Player","progress","playedSeconds","changeProgress","played","setState","track","play","onPlay","onStop","playing","fileConfig","forceAudio","onProgress","id","F","Math","round","style","width","React","Card","item","artworkUrl100","artistName","trackName","collectionName","country","releaseDate","trackTimeMillis","previewUrl","trackId","Analytics","Musicians","history","makeCell","index","searchSongs","term","push","R","updateNote","updateNotes","payload","mapDispatchToProps","addNote","note","noteWithId","generateId","notes","localStorage","getItem","JSON","parse","allNotes","setItem","stringify","deleteNote","getState","notesReducer","updateNoteById","newValue","value","onEdit","onChange","target","onUpdate","containerType","buttonText","EditContainer","isSameType","visible","currentNote","showModal","handleCancel","handleAdd","onCancel","footer","placeholder","TextArea","axios","axiosForMusic","Axios","create","baseURL","headers","Accept","responseType","api","getMusic","params","get","a","results","data","songs","musicReducer","entity","loading","onSearch","getSongs","location","spinning","Search","enterButton","localNotes","initialState","combineReducers","rootStore","createStore","store","applyMiddleware","thunk","App","exact","component","Notes","Music","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.551572b1.chunk.js","sourcesContent":["const text =  {\r\n    appName: 'My iTunes',\r\n    musicHeadline: 'Music',\r\n    modalApply: 'Apply',\r\n    modalCancel: 'Cancel',\r\n    modalAdd: 'Add',\r\n    modalSave: 'Save',\r\n    buttonDelete: 'Delete',\r\n    buttonChange: 'Change',\r\n    buttonSearch: 'Search',\r\n    buttonPlaySong: 'Play preview of song',\r\n    placeholderForGenderSelect: 'Select a gender',\r\n    placeholderForSearchMusic: 'Enter artist',\r\n    genderMale: 'male',\r\n    genderFemale: 'female',\r\n    imgAlt: 'Artist'\r\n};\r\n\r\nexport default text;\r\n\r\n\r\n","import React from 'react';\r\nimport {Icon} from 'antd';\r\nimport text from '../../constants/text';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"headline\">\r\n          {text.appName}\r\n          <Icon type=\"apple\" theme=\"filled\"/>\r\n        </h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","const utils = {\r\n    sidebarItems: [\r\n        {\r\n            title: 'Musicians',\r\n            path: '/musicians',\r\n            iconType: 'user'\r\n        },\r\n        {\r\n            title: 'Analytics',\r\n            path: '/analytics',\r\n            iconType: 'line-chart'\r\n        },\r\n        {\r\n            title: 'Notes',\r\n            path: '/notes',\r\n            iconType: 'form'\r\n        },\r\n        {\r\n            title: 'Music',\r\n            path: '/music',\r\n            iconType: 'customer-service'\r\n        }\r\n    ],\r\n    userTableColumns: ['Name','Age','Gender','Region'],\r\n    types: {\r\n        title: 'title',\r\n        date: 'date',\r\n        text: 'text'\r\n    },\r\n    musicians: [\r\n        {\r\n            name: 'Beyonce',\r\n            age: 38,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Katy Perry',\r\n            age: 34,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Rihanna',\r\n            age: 31,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Madonna',\r\n            age: 61,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Sia',\r\n            age: 43,\r\n            gender: 'female',\r\n            region: 'Australia'\r\n        },\r\n        {\r\n            name: 'Lady GaGa',\r\n            age: 33,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Lana Del Ray',\r\n            age: 34,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Justin Timberlake',\r\n            age: 38,\r\n            gender: 'male',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Chris Brown',\r\n            age: 30,\r\n            gender: 'male',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Justin Bieber',\r\n            age: 25,\r\n            gender: 'male',\r\n            region: 'Canada'\r\n        },\r\n        {\r\n            name: 'Ed Sheeran',\r\n            age: 28,\r\n            gender: 'male',\r\n            region: 'Great Britain'\r\n        },\r\n        {\r\n            name: 'Hozier',\r\n            age: 29,\r\n            gender: 'male',\r\n            region: 'Ireland'\r\n        },\r\n        {\r\n            name: 'Whitney Houston',\r\n            age: 48,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Cardi B',\r\n            age: 26,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Billie Eilish',\r\n            age: 17,\r\n            gender: 'female',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Martin Garrix',\r\n            age: 23,\r\n            gender: 'male',\r\n            region: 'Netherlands'\r\n        },\r\n        {\r\n            name: '6lack',\r\n            age: 27,\r\n            gender: 'male',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Drake',\r\n            age: 32,\r\n            gender: 'male',\r\n            region: 'Canada'\r\n        },\r\n        {\r\n            name: 'Kanye West',\r\n            age: 42,\r\n            gender: 'male',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Bones',\r\n            age: 25,\r\n            gender: 'male',\r\n            region: 'USA'\r\n        },\r\n        {\r\n            name: 'Post Malone',\r\n            age: 24,\r\n            gender: 'male',\r\n            region: 'USA'}\r\n    ]\r\n};\r\n\r\nexport default utils;\r\n\r\n","import {connect} from 'react-redux';\r\nimport {toggleStateSideBar} from '../../redux/sidebar/actions';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isOpen: state.sidebarReducer.isOpen\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    toggleState: () => dispatch(toggleStateSideBar())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)\r\n\r\n","import { TOGGLE_STATE } from './types';\r\n\r\nexport const toggleStateSideBar = () => ({\r\n    type: TOGGLE_STATE\r\n});","export const TOGGLE_STATE = 'TOGGLE_STATE';","import React, {Component} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Utils from '../../constants/utils';\r\nimport {Icon} from 'antd/es';\r\nimport connect from \"./connect\";\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends Component {\r\n    renderList = (isOpen) => (\r\n        Utils.sidebarItems.map(it => (\r\n            <NavLink to={it.path} key={it.title} activeClassName=\"active-link\" className=\"link\">\r\n                <Icon type={it.iconType} />\r\n                {isOpen && it.title}\r\n            </NavLink>\r\n        ))\r\n    );\r\n\r\n    render() {\r\n        const { isOpen, toggleState } = this.props;\r\n        return (\r\n            <aside className={isOpen ? 'open' : 'close'}>\r\n                <ul>\r\n                    {this.renderList(isOpen)}\r\n                </ul>\r\n                <button onClick={toggleState}>\r\n                    <Icon type={isOpen ? \"double-left\" : \"double-right\"}/>\r\n                    {isOpen && 'Collapse Sidebar' }\r\n                </button>\r\n            </aside>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(Sidebar);","import React from 'react';\r\nimport text from '../../constants/text';\r\nimport './Avatar.css'\r\n\r\nconst Avatar = ({url}) => (\r\n    <img src={url} alt={text.imgAlt}/>\r\n);\r\n\r\nexport default Avatar;","const parseDuration = (time) => {\r\n    const date = new Date(time);\r\n    return `${createCorrectDurationPart(date.getMinutes())}:${createCorrectDurationPart(date.getSeconds())}`;\r\n};\r\n\r\nconst createCorrectDurationPart = (part) => String(part).length > 1 ? part : `0${part}`;\r\n\r\nconst parseDateRelease = (date) => new Date(date).toDateString().slice(4);\r\n\r\nconst parseName = (name) => name.length > 15 ? `${name.slice(0, 15)}...` : name;\r\n\r\nconst createReducer = (handleReducer, defaultState) => (state =  defaultState, action) => {\r\n    const handler = handleReducer[action.type];\r\n    return handler ? handler(state, action) : state;\r\n};\r\n\r\nexport default {\r\n    parseDuration,\r\n    parseDateRelease,\r\n    createCorrectDurationPart,\r\n    parseName,\r\n    createReducer\r\n}","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport {Button, Icon} from 'antd';\r\nimport F from '../../utils/func';\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n    state = {\r\n        progress: 0,\r\n        playedSeconds: 0,\r\n    };\r\n\r\n    changeProgress = ({played, playedSeconds}) => {\r\n        this.setState({\r\n            progress: played,\r\n            playedSeconds\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {url, track, play, onPlay, onStop} = this.props;\r\n        const {playedSeconds, progress} = this.state;\r\n\r\n        return (\r\n            <div className=\"player_wrapper\">\r\n                <ReactPlayer\r\n                    url={url}\r\n                    playing={play}\r\n                    fileConfig={{forceAudio: true}}\r\n                    onProgress={this.changeProgress}\r\n                />\r\n                <div className=\"player\">\r\n                    <Button type=\"primary\" onClick={play ? onStop : onPlay} id={track}>\r\n                        <Icon type={ play ? 'pause' : 'caret-right'} />\r\n                    </Button>\r\n                    <span>{`0:${F.createCorrectDurationPart(Math.round(playedSeconds))} / 0:30`}</span>\r\n                    <div className=\"progress_bar\">\r\n                        <span style={{width: `${progress * 100}%`}}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport {Avatar} from '../index';\r\nimport Player from '../Player/Player';\r\nimport F from '../../utils/func';\r\nimport './Card.css';\r\n\r\nconst Card = ({item, play, onPlay, onStop}) =>  {\r\n    const {\r\n      artworkUrl100,\r\n      artistName,\r\n      trackName,\r\n      collectionName,\r\n      country,\r\n      releaseDate,\r\n      trackTimeMillis,\r\n      previewUrl,\r\n      trackId\r\n    } = item;\r\n\r\n    return  (\r\n        <div className=\"card\">\r\n            <div className=\"info\">\r\n                <Avatar url={artworkUrl100}/>\r\n                <div className=\"text\">\r\n                    <h2>{`${F.parseName(artistName)} - ${F.parseName(trackName)}`}</h2>\r\n                    <p>{`Album: ${F.parseName(collectionName)}`}</p>\r\n                    <p>{`Country: ${country}`}</p>\r\n                    <p>{`Date: ${F.parseDateRelease(releaseDate)}`}</p>\r\n                    <p>{`Duration: ${F.parseDuration(trackTimeMillis)}`}</p>\r\n                </div>\r\n            </div>\r\n            <Player\r\n                url={previewUrl}\r\n                track={trackId}\r\n                play={play}\r\n                onPlay={onPlay}\r\n                onStop={onStop}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Analytics.css';\r\n\r\nconst Analytics = () => (\r\n    <div className=\"wrapper\">\r\n        <h1>Analytics</h1>\r\n    </div>\r\n);\r\n\r\nexport default Analytics;","import React from 'react';\r\nimport {Button, Icon} from 'antd/es';\r\nimport * as R from 'ramda';\r\nimport utils from '../../constants/utils';\r\nimport text from '../../constants/text';\r\nimport './Musicians.css';\r\n\r\nconst Musicians = ({history}) => {\r\n    const makeCell = (it, index) => <td key={`${index}${it}`}>{it}</td>;\r\n\r\n    const makeLine = (it, index) => (\r\n        <tr key={`${it.name}${index}`}>\r\n            { R.map(makeCell, R.values(it)) }\r\n            <td>\r\n                <Button onClick={searchSongs(it.name)}> {text.buttonSearch} <Icon type=\"apple\"/></Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n    const searchSongs = (term) => () => {\r\n        history.push('/music', {term});\r\n    };\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <h1>Musicians</h1>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    { R.map(makeCell, utils.userTableColumns) }\r\n                </tr>\r\n                </thead>\r\n                { R.map(makeLine, utils.musicians) }\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Musicians;","import {ADD_NOTE, UPDATE_NOTE} from \"./types\";\r\n\r\nexport const addNote = (currentNote) => ({\r\n    type: ADD_NOTE,\r\n    payload: currentNote\r\n});\r\n\r\nexport const updateNote = (updateNotes) => ({\r\n    type: UPDATE_NOTE,\r\n    payload: updateNotes\r\n});","export const ADD_NOTE = 'ADD_NOTE';\r\nexport const UPDATE_NOTE = 'UPDATE_NOTE';","import * as R from 'ramda';\r\nimport * as action from '../../redux/notes/actions';\r\nimport generateId from 'nanoid';\r\n\r\nexport const addNote = (note) => (dispatch) => {\r\n    const noteWithId = {...note, id: generateId()};\r\n    const notes = R.pipe(\r\n            localStorage.getItem,\r\n            R.defaultTo('[]'),\r\n            JSON.parse\r\n        )('notes');\r\n    const allNotes = [...notes, noteWithId];\r\n    localStorage.setItem('notes', JSON.stringify(allNotes));\r\n    dispatch(action.addNote(noteWithId));\r\n};\r\n\r\nexport const deleteNote = (id) => (dispatch, getState) => {\r\n    const {notes} = getState().notesReducer;\r\n    const isAnotherId = it => it.id !== id;\r\n    const updateNotes = R.filter(isAnotherId, notes);\r\n    localStorage.setItem('notes', JSON.stringify(updateNotes));\r\n    dispatch(action.updateNote(updateNotes));\r\n};\r\n\r\nexport const updateNoteById = (id, newValue, type) => (dispatch, getState) => {\r\n    const {notes} = getState().notesReducer;\r\n    const updateNotes = R.map(it => {\r\n        if(it.id !== id) return it;\r\n        return {\r\n            ...it,\r\n            [type]: newValue\r\n        }\r\n    }, notes);\r\n    localStorage.setItem('notes', JSON.stringify(updateNotes));\r\n    dispatch(action.updateNote(updateNotes));\r\n};","import {connect} from 'react-redux';\r\nimport {addNote, deleteNote, updateNoteById} from './helpers'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    notes: state.notesReducer.notes\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addNote,\r\n    deleteNote,\r\n    updateNoteById\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps);","import React from 'react';\r\nimport {Button} from 'antd';\r\nimport {EditContainer} from '../index';\r\nimport connect from '../../connect';\r\nimport utils from '../../../../constants/utils';\r\nimport buttonText from '../../../../constants/text';\r\nimport './Note.scss';\r\n\r\nclass Note extends React.Component {\r\n    state = {\r\n        type: null,\r\n        value: ''\r\n    };\r\n\r\n    onEdit = (type, value) => ()  => {\r\n        this.setState({\r\n            type,\r\n            value\r\n        })\r\n    };\r\n\r\n    onChange = ({target: {value}}) => {\r\n        this.setState({\r\n            value\r\n        })\r\n    };\r\n\r\n    onUpdate = () => {\r\n        const {type, value} = this.state;\r\n        const {id, updateNoteById} = this.props;\r\n        updateNoteById(id, value, type);\r\n        this.setState({\r\n            value: '',\r\n            type: null\r\n        })\r\n    };\r\n\r\n    deleteNote = () => {\r\n        const {id, deleteNote} = this.props;\r\n        deleteNote(id);\r\n    };\r\n\r\n    render(){\r\n        const {type, value} = this.state;\r\n        const {title, date, text} = this.props;\r\n\r\n        return(\r\n            <div className=\"note\">\r\n                <header>\r\n                    <div className=\"note-info\">\r\n                        <EditContainer\r\n                            type={type}\r\n                            containerType={utils.types.title}\r\n                            value={value}\r\n                            onChange={this.onChange}\r\n                            onUpdate={this.onUpdate}\r\n                            text={title}\r\n                            onEdit={this.onEdit}\r\n                        />\r\n                        <EditContainer\r\n                            type={type}\r\n                            containerType={utils.types.date}\r\n                            value={value}\r\n                            onChange={this.onChange}\r\n                            onUpdate={this.onUpdate}\r\n                            text={date}\r\n                            onEdit={this.onEdit}\r\n                        />\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={this.deleteNote}>\r\n                        {buttonText.buttonDelete}\r\n                    </Button>\r\n                </header>\r\n\r\n                    <EditContainer\r\n                        type={type}\r\n                        containerType={utils.types.text}\r\n                        value={value}\r\n                        onChange={this.onChange}\r\n                        onUpdate={this.onUpdate}\r\n                        text={text}\r\n                        onEdit={this.onEdit}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(Note);","import React from 'react';\r\nimport {Icon, Input} from 'antd';\r\nimport './EditContainer.scss';\r\n\r\nconst EditContainer = ({type, containerType, value, onChange, onUpdate, onEdit, text}) => {\r\n    const isSameType = type === containerType;\r\n\r\n    return(\r\n        <div className=\"edit-container\">\r\n            {\r\n                isSameType\r\n                    ? <Input\r\n                        type=\"text\"\r\n                        name={containerType}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                      />\r\n                    : <p>{text}</p>\r\n            }\r\n            {\r\n               <Icon\r\n                   type={isSameType ? 'check-circle' : 'edit'}\r\n                   onClick={isSameType ? onUpdate : onEdit(containerType, text)}\r\n                   className={isSameType ? 'save' : 'edit'}\r\n               />\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default EditContainer;","import React, {Component} from 'react';\r\nimport {Button, Input, Modal} from 'antd/es';\r\nimport * as R from 'ramda';\r\nimport connect from './connect';\r\nimport {Note} from './components/index';\r\nimport text from '../../constants/text';\r\nimport './Notes.css';\r\n\r\nclass Notes extends Component {\r\n    state = {\r\n        visible: false,\r\n        currentNote: {}\r\n    };\r\n\r\n    showModal = () => {\r\n        this.setState({\r\n            visible: true\r\n        })\r\n    };\r\n\r\n    handleCancel = () => {\r\n        this.setState({\r\n            visible: false,\r\n        })\r\n    };\r\n\r\n    handleAdd = () => {\r\n        const { currentNote } = this.state;\r\n        this.props.addNote(currentNote);\r\n        this.setState({\r\n            visible: false,\r\n            currentNote: {}\r\n        });\r\n    };\r\n\r\n    onChange = ({target}) => {\r\n        const {name, value} = target;\r\n        const { currentNote } = this.state;\r\n        this.setState({\r\n            currentNote: {\r\n                ...currentNote,\r\n                [name]: value\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {visible, currentNote} = this.state;\r\n        const {notes} = this.props;\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <h1>Notes</h1>\r\n                <Button onClick={this.showModal} type=\"primary\">\r\n                    Add note\r\n                </Button>\r\n                <Modal\r\n                    title=\"Add Note\"\r\n                    visible={visible}\r\n                    onCancel={this.handleCancel}\r\n                    footer={[\r\n                        <Button type=\"back\" onClick={this.handleCancel}>\r\n                            {text.modalCancel}\r\n                        </Button>,\r\n                        <Button type=\"primary\" onClick={this.handleAdd}>\r\n                            {text.modalAdd}\r\n                        </Button>\r\n                    ]}\r\n                >\r\n                    <Input\r\n                        placeholder=\"Title\"\r\n                        name=\"title\"\r\n                        onChange={this.onChange}\r\n                        value={currentNote.title}\r\n                    />\r\n                    <Input\r\n                        placeholder=\"Date in format MM.DD.YYYY\"\r\n                        name=\"date\"\r\n                        onChange={this.onChange}\r\n                        value={currentNote.date}\r\n                    />\r\n                    <Input.TextArea\r\n                        placeholder=\"Your note...\"\r\n                        name=\"text\"\r\n                        onChange={this.onChange}\r\n                        value={currentNote.text}\r\n                    />\r\n                </Modal>\r\n                <div className=\"notes\">\r\n                    {\r\n                        R.map(note => (\r\n                            <Note\r\n                                key={note.id}\r\n                                id={note.id}\r\n                                title={note.title}\r\n                                date={note.date}\r\n                                text={note.text}\r\n                            />),\r\n                        notes)\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(Notes);","import Axios from 'axios';\r\n\r\nconst axios = {\r\n    axiosForMusic: Axios.create({\r\n        baseURL: 'https://itunes.apple.com/search?',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json'\r\n        },\r\n        responseType: 'json'\r\n    })\r\n};\r\n\r\nexport default axios;","import axios from '../axios';\r\n\r\nconst api = {\r\n    getMusic: (params) => axios.axiosForMusic.get('', {params})\r\n};\r\n\r\nexport default api;","import {connect} from 'react-redux';\r\nimport {getMusic} from './helpers';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    songs: state.musicReducer.songs\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getMusic\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps);","import * as action from '../../redux/music/actions';\r\nimport api from '../../methods/api';\r\n\r\nexport const getMusic = (params) => async (dispatch) => {\r\n    const {data: {results}} = await api.getMusic(params);\r\n    dispatch(action.getMusic(results));\r\n};","import {GET_MUSIC} from './types';\r\n\r\nexport const getMusic = (songs) => ({\r\n    type: GET_MUSIC,\r\n    payload: songs\r\n});","export const GET_MUSIC = 'GET_MUSIC';","import React, {Component} from 'react';\r\nimport {Input, Spin} from 'antd';\r\nimport * as R from 'ramda';\r\nimport connect from './connect';\r\nimport {Card} from '../../components';\r\nimport text from '../../constants/text';\r\nimport './Music.css';\r\n\r\nclass Music extends Component {\r\n    state = {\r\n        params: {\r\n            term: null,\r\n            entity: 'song'\r\n        },\r\n        loading: false,\r\n        playing: false,\r\n        trackId: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {state} = this.props.location;\r\n        state && this.onSearch(state.term)\r\n    }\r\n\r\n    onPlay = (trackId) => () => {\r\n        this.setState({\r\n            playing: true,\r\n            trackId\r\n        })\r\n    };\r\n\r\n    onStop = () => {\r\n        this.setState({\r\n            playing: false\r\n        })\r\n    };\r\n    onSearch = (value) => {\r\n        this.setState({\r\n            params: {\r\n                ...this.state.params,\r\n                term: value\r\n            }\r\n        }, this.getSongs)\r\n    };\r\n\r\n    getSongs = async () => {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        await this.props.getMusic(this.state.params);\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    };\r\n\r\n    onChange = ({target: {value}}) => {\r\n        this.setState({\r\n            params: {\r\n                ...this.state.params,\r\n                term: value\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {songs} = this.props;\r\n        const {loading, playing, trackId, params:{term}} = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Spin spinning={loading}>\r\n                    <h1>{text.musicHeadline}</h1>\r\n                    <Input.Search\r\n                        placeholder={text.placeholderForSearchMusic}\r\n                        enterButton={text.buttonSearch}\r\n                        onSearch={this.onSearch}\r\n                        value={term}\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <div className=\"cards\">\r\n                        {\r\n                            R.map(it =>\r\n                                <Card\r\n                                    item={it}\r\n                                    play={playing && it.trackId === trackId}\r\n                                    key={it.trackId}\r\n                                    onPlay={this.onPlay(it.trackId)}\r\n                                    onStop={this.onStop}\r\n                                />,\r\n                            songs)\r\n                        }\r\n                    </div>\r\n                </Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(Music);","import { TOGGLE_STATE } from './types';\r\nimport F from '../../utils/func';\r\n\r\nconst initialState = {\r\n    isOpen: false,\r\n};\r\n\r\nconst handleReducer = {\r\n    [TOGGLE_STATE]: (state) => ({\r\n        ...state,\r\n        isOpen: !state.isOpen\r\n    }),\r\n};\r\n\r\nexport default F.createReducer(handleReducer, initialState);\r\n","import {ADD_NOTE, UPDATE_NOTE} from \"./types\";\r\nimport F from '../../utils/func';\r\n\r\nconst localNotes = localStorage.getItem('notes');\r\n\r\nconst initialState = {\r\n    notes: localNotes ? JSON.parse(localNotes) : []\r\n};\r\n\r\nconst handleReducer = {\r\n    [ADD_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: [...state.notes, payload]\r\n    }),\r\n    [UPDATE_NOTE]: (state, {payload}) => ({\r\n        ...state,\r\n        notes: payload\r\n    })\r\n};\r\n\r\nexport default F.createReducer(handleReducer, initialState);","import {GET_MUSIC} from './types';\r\nimport F from '../../utils/func';\r\n\r\nconst initialState = {\r\n    songs: []\r\n};\r\n\r\nconst handleReducer = {\r\n    [GET_MUSIC]: (state, {payload}) => ({\r\n        ...state,\r\n        songs: [...payload]\r\n    })\r\n};\r\n\r\nexport default F.createReducer(handleReducer, initialState);","import { combineReducers } from 'redux';\r\nimport sidebarReducer from './sidebar/reducer';\r\nimport notesReducer from './notes/reducer';\r\nimport musicReducer from './music/reducer';\r\n\r\nexport default combineReducers({\r\n    sidebarReducer,\r\n    notesReducer,\r\n    musicReducer\r\n})","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport './App.css';\r\nimport './constants/text';\r\nimport {Header, Sidebar} from './components';\r\nimport {Musicians, Analytics, Notes, Music} from './pages';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport store from './redux/index';\r\n\r\nconst rootStore = createStore(store, applyMiddleware(thunk));\r\n\r\nconst App = () => (\r\n    <Provider store={rootStore}>\r\n        <Router>\r\n            <Header/>\r\n            <main>\r\n                <Sidebar/>\r\n                <Route path=\"/musicians\" exact component={Musicians}/>\r\n                <Route path=\"/analytics\" exact component={Analytics}/>\r\n                <Route path=\"/notes\" exact component={Notes}/>\r\n                <Route path=\"/music\" exact component={Music}/>\r\n            </main>\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}